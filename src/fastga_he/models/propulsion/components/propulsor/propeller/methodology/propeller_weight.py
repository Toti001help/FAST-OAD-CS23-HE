# This file is part of FAST-OAD_CS23-HE : A framework for rapid Overall Aircraft Design of Hybrid
# Electric Aircraft.
# Copyright (C) 2022 ISAE-SUPAERO

import numpy as np
import plotly.graph_objects as go

if __name__ == "__main__":

    weight = np.array(
        [
            12.5,
            14,
            79.4,
            69.4,
            69.4,
            76.2,
            68.9,
            76.2,
            69.9,
            68.9,
            68.9,
            65.8,
            61.7,
            66.5,
            68.9,
            68.9,
            68.5,
            58.9,
            74.8,
            70.8,
            59.9,
            72.6,
            76.4,
            70.8,
            59.9,
            68.9,
            54.4,
            54.9,
            64.4,
            65.7,
            61.7,
            68.9,
            65.8,
            52.2,
            69.9,
            60.8,
            78,
            70.8,
            59.8,
            64.4,
            61.7,
            65.8,
            1.8,
            9.5,
            9.5,
            11.3,
            2.3,
            2.5,
            1,
            57,
            57,
            2.1,
            1,
            1,
            2,
            2.2,
            1.8,
            47.6,
            47.6,
            47.6,
            49,
            49.9,
            47.6,
            51,
            51.3,
            51.3,
            51.3,
            51,
            51,
            51,
            51,
            52.6,
            52.6,
            53.61,
            61.2,
            63,
            63.5,
            61.2,
            53.5,
            52.2,
            52.2,
            52.2,
            57.6,
            57.8,
            57.8,
            24,
            24,
            24,
            24,
            83.7,
            5.6,
            227,
            4,
            74,
            74,
            11.5,
            11.5,
            28.03,
            59.87,
            60.78,
            66.68,
            27,
            34,
            5.8,
            80,
            10,
            10,
            10,
            10,
            326,
            326,
            8.5,
            9,
            3.2,
            5.5,
            6.7,
            9.2,
            13.5,
            9.84,
            35.8,
            34.6,
            30.8,
            31.3,
            32.9,
            36.3,
            32.2,
            34.6,
            33.1,
            31.3,
            34.5,
            30.4,
            33.1,
            35.4,
            34.9,
            34.9,
            32.7,
            33.6,
            35.4,
            34.6,
            34.6,
            33.6,
            35.4,
            36.7,
            36.7,
            35.4,
            35.4,
            35.4,
            38.6,
            30.6,
            32.9,
            37.2,
            30.8,
            30.8,
            31.8,
            34.7,
            29.9,
            39.5,
            39.5,
            37.6,
            34.9,
            35.4,
            36.6,
            40.4,
            36.3,
            38.1,
            37.2,
            35.4,
            38.6,
            34.5,
            39.5,
            36.7,
            39.5,
            39.5,
            38.1,
            38.1,
            39.5,
            39.5,
            39.5,
            40.8,
            40.8,
            39.5,
            39.5,
            39.5,
            42.6,
            42.6,
            41.3,
            36.8,
            39.5,
            34.6,
            99.8,
            97.5,
            104.3,
            115.2,
            115.2,
            123.8,
            115.2,
            115.7,
            118.4,
            100.2,
            115.2,
            123.8,
            124.7,
        ]
    )
    weight_star = weight / weight[0]
    diameter = np.array(
        [
            195,
            195,
            238.7,
            241.3,
            241.3,
            335.3,
            231.1,
            284.5,
            269.2,
            238.8,
            243.8,
            231.1,
            236.2,
            243.8,
            243.8,
            243.8,
            238.8,
            218.4,
            269.2,
            246.4,
            246.4,
            266.7,
            266.7,
            266.7,
            279.4,
            243.8,
            207.6,
            209.6,
            228.6,
            231.1,
            236.2,
            243.8,
            254,
            241.3,
            246.4,
            279.4,
            278.1,
            266.7,
            304.8,
            228.6,
            236.2,
            231.1,
            148.5,
            178,
            178,
            168,
            158,
            160,
            79,
            242,
            230,
            155,
            120,
            100,
            155,
            155,
            125,
            257.5,
            260,
            237.2,
            257.5,
            257.5,
            260,
            257.5,
            274.3,
            274.3,
            269.2,
            259.1,
            205.7,
            259.1,
            259.1,
            269.2,
            275.3,
            233.7,
            264.2,
            269.2,
            269.2,
            264.2,
            233.7,
            257.5,
            260,
            260,
            257.5,
            274.3,
            205.7,
            213,
            250,
            260,
            260,
            230,
            290,
            380,
            173,
            230,
            270,
            180,
            180,
            199.64,
            209.6,
            231.1,
            243.8,
            201,
            201,
            192,
            250,
            160,
            175,
            180,
            203,
            411.5,
            411.5,
            160,
            170,
            160,
            183,
            188,
            200,
            256,
            195.6,
            172.7,
            177.8,
            188,
            190.5,
            190.5,
            193,
            193,
            188,
            195.6,
            198.1,
            198.1,
            198.1,
            203.2,
            203.2,
            213.4,
            203.2,
            218.4,
            218.4,
            218.4,
            218.4,
            203.2,
            218.4,
            218.4,
            218.4,
            218.4,
            246.4,
            241.3,
            208.3,
            243.8,
            198,
            193,
            198.1,
            215.9,
            215.9,
            198.1,
            203.2,
            215.9,
            236.2,
            172.7,
            177.8,
            188,
            190.5,
            190.5,
            193,
            193,
            188,
            195.6,
            198.1,
            198.1,
            198.1,
            203.2,
            218.4,
            218.4,
            218.4,
            218.4,
            203.2,
            218.4,
            218.4,
            218.4,
            218.4,
            218.4,
            246.4,
            241.3,
            208.3,
            243.8,
            236.2,
            203.2,
            203.2,
            236.2,
            198.1,
            282.702,
            265.938,
            282.448,
            292.608,
            292.608,
            301.498,
            292.608,
            292.608,
            301.498,
            238.76,
            292.608,
            301.498,
            301.498,
        ]
    )
    diameter_star = diameter / diameter[0]
    max_cont_rpm = np.array(
        [
            2283,
            2283,
            2000,
            1700,
            1700,
            1390,
            2000,
            1591,
            1700,
            2000,
            2040,
            2000,
            2200,
            2200,
            2200,
            2200,
            2000,
            2000,
            1700,
            1700,
            1735,
            1700,
            1700,
            1700,
            1735,
            2040,
            2200,
            2000,
            2200,
            2000,
            2200,
            2200,
            2000,
            2000,
            2000,
            1591,
            1591,
            1700,
            1540,
            2080,
            2200,
            2080,
            2826,
            2560,
            2279,
            2700,
            2500,
            2400,
            6000,
            1607,
            2000,
            3000,
            4500,
            5400,
            3000,
            3000,
            3750,
            2200,
            2200,
            2200,
            2000,
            2000,
            2200,
            2200,
            1591,
            1591,
            2000,
            2000,
            2200,
            2200,
            2200,
            1591,
            1591,
            2200,
            2000,
            1900,
            1900,
            2000,
            2180,
            2180,
            2180,
            2180,
            2180,
            2180,
            2180,
            2700,
            2300,
            1975,
            2200,
            2080,
            2700,
            1100,
            2551,
            2000,
            1700,
            2560,
            2279,
            2700,
            2000,
            2000,
            2000,
            2700,
            2700,
            2500,
            1950,
            3000,
            2750,
            2265,
            2279,
            1020.7,
            1020.7,
            3200,
            2750,
            3600,
            2800,
            2700,
            2340,
            2000,
            2387,
            2700,
            2850,
            2700,
            2850,
            2850,
            2700,
            2800,
            2900,
            2850,
            2800,
            2700,
            2850,
            2700,
            2700,
            2700,
            2700,
            2700,
            2700,
            2575,
            2700,
            2850,
            2700,
            2650,
            2575,
            2600,
            1810,
            2200,
            2700,
            2000,
            2700,
            2700,
            2850,
            2700,
            2850,
            2850,
            2700,
            2700,
            2275,
            2700,
            2850,
            2700,
            2850,
            2700,
            2700,
            2800,
            2900,
            2850,
            2800,
            2700,
            2850,
            2650,
            2700,
            2700,
            2575,
            2700,
            2850,
            2700,
            2650,
            2650,
            2575,
            2650,
            1810,
            2200,
            2700,
            2000,
            2133,
            2133,
            2700,
            2275,
            2850,
            1700,
            1700,
            1700,
            1700,
            1700,
            1591,
            1700,
            1700,
            1700,
            2000,
            1700,
            1552,
            1552,
        ]
    )
    max_cont_power = np.array(
        [
            117,
            117,
            1226.7,
            894.8,
            894.8,
            1226.7,
            708.4,
            820.3,
            894.8,
            708.4,
            708.4,
            708.4,
            559.3,
            559.3,
            633.8,
            633.8,
            820.3,
            596.6,
            745.7,
            894.8,
            1044,
            894.8,
            894.8,
            894.8,
            1044,
            708.4,
            559.3,
            596.6,
            559.3,
            708.4,
            559.3,
            633.8,
            633.8,
            633.8,
            708.4,
            820.3,
            708.4,
            834.8,
            745.7,
            579.4,
            559.3,
            708.4,
            22,
            86,
            117,
            134,
            37,
            47,
            19.6,
            533,
            634,
            70,
            20,
            20,
            30,
            70,
            60,
            372.8,
            507.1,
            559.3,
            559.3,
            633.8,
            507.1,
            559.3,
            540.6,
            540.6,
            559.3,
            559.3,
            559.3,
            559.3,
            559.3,
            540.6,
            611.5,
            335.6,
            633.8,
            648.8,
            648.8,
            559.3,
            335.6,
            335.6,
            335.6,
            335.6,
            335.6,
            335.6,
            335.6,
            314,
            634,
            314,
            634,
            635,
            120,
            2787.4,
            86,
            1268,
            1268,
            86,
            104,
            261,
            633.8,
            708.4,
            633.8,
            243,
            265,
            85,
            635,
            68,
            73.6,
            73.5,
            104,
            3509,
            3509,
            53,
            75,
            65,
            100,
            120,
            156,
            179,
            74.6,
            289.3,
            261,
            223.7,
            261,
            261,
            289.3,
            231.2,
            283.4,
            261,
            261,
            231.2,
            261,
            289.3,
            289.3,
            261,
            261,
            289.3,
            289.3,
            289.3,
            289.3,
            231.2,
            289.3,
            289.3,
            289.3,
            289.3,
            296.8,
            238.6,
            212.5,
            212.5,
            261,
            261,
            261,
            261,
            261,
            261,
            261,
            261,
            279.6,
            289.3,
            261,
            223.7,
            261,
            261,
            289.3,
            231.2,
            283.4,
            261,
            261,
            231.2,
            261,
            289.3,
            289.3,
            289.3,
            289.3,
            289.3,
            231.2,
            289.3,
            289.3,
            289.3,
            289,
            289,
            296.8,
            238.6,
            212.5,
            212.5,
            335.6,
            341.5,
            289,
            279.6,
            261,
            835.2,
            835.2,
            989.5,
            989.5,
            989.5,
            932.1,
            1230.4,
            1230.4,
            1230.4,
            1193.1,
            1230.4,
            1230.4,
            1230.4,
        ]
    )
    nb_of_blades = np.array(
        [
            3,
            3,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            3,
            3,
            5,
            2,
            2,
            2,
            7,
            7,
            2,
            2,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            5,
            3,
            6,
            2,
            7,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            3,
            3,
            4,
            4,
            2,
            2,
            2,
            2,
            6,
            6,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
        ]
    )
    nb_of_blades_star = nb_of_blades / nb_of_blades[0]

    materials = np.array(
        [
            1,
            1,
            2,
            2,
            2,
            3,
            2,
            2,
            2,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            3,
            4,
            4,
            4,
            3,
            4,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            4,
            2,
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            1,
            1,
            2,
            2,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            1,
            1,
            1,
            1,
            4,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            1,
            1,
            2,
            4,
            1,
            1,
            1,
            1,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            4,
            3,
            2,
            2,
            3,
            4,
            2,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
        ]
    )

    weight_per_blade = weight / nb_of_blades
    weight_per_blade_star = weight_per_blade / weight_per_blade[0]

    max_cont_torque = max_cont_power * 1000.0 / (max_cont_rpm / 60.0 * 2.0 * np.pi)
    max_cont_torque_star = max_cont_torque / max_cont_torque[0]

    mean_k = np.mean(max_cont_rpm * diameter)
    fig = go.Figure()
    scatter = go.Scatter(x=diameter, y=max_cont_rpm, mode="markers", name="Max continuous RPM")
    scatter_scaling = go.Scatter(
        x=np.sort(diameter),
        y=mean_k / np.sort(diameter),
        mode="lines",
        name="Max continuous Scaling",
    )
    fig.add_trace(scatter)
    fig.add_trace(scatter_scaling)
    # fig.show()

    fig_weight = go.Figure()

    for materials_loop in np.unique(materials):

        idx_loop = np.where(materials_loop == materials)

        if materials_loop == 1:
            materials_desc = "Wood and composite"
        elif materials_loop == 2:
            materials_desc = "Carbon composite"
        elif materials_loop == 3:
            materials_desc = "Aramid composite"
        else:
            materials_desc = "Aluminium alloy"

        scatter_loop = go.Scatter(
            x=max_cont_torque[idx_loop],
            y=weight_per_blade[idx_loop],
            name=materials_desc,
            mode="markers",
        )
        fig_weight.add_trace(scatter_loop)

    fig_weight.update_layout(
        title_text="Propeller weight for different materials",
        title_x=0.5,
        xaxis_title="Max continuous torque [Nm]",
        yaxis_title="Weight [kg]",
    )
    fig_weight = go.FigureWidget(fig_weight)
    # fig_weight.show()

    idx_aluminium = np.where(materials == 4)
    idx_composite = np.where(materials != 4)

    weight_per_blade_star_aluminium = weight_per_blade_star[idx_aluminium]
    weight_per_blade_aluminium = weight_per_blade[idx_aluminium]
    max_cont_torque_star_aluminium = max_cont_torque_star[idx_aluminium]
    max_cont_torque_aluminium = max_cont_torque[idx_aluminium]
    diameter_star_aluminium = diameter_star[idx_aluminium]
    diameter_aluminium = diameter[idx_aluminium]
    B = weight_per_blade_aluminium
    A = np.column_stack(
        [
            np.ones_like(weight_per_blade_aluminium),
            max_cont_torque_aluminium,
            diameter_aluminium ** 3.0,
        ]
    )
    x = np.linalg.lstsq(A, B, rcond=None)
    constant, a, b = x[0]
    print(constant, a * 1000, b)
    estimated_weight = constant + a * max_cont_torque_aluminium + b * diameter_aluminium ** 3
    print(
        np.mean(
            np.abs(
                (estimated_weight - weight_per_blade_aluminium) / weight_per_blade_aluminium * 100.0
            )
        )
    )
    print("Number of propellers: ", len(weight))

    scatter_estimated = go.Scatter(
        x=max_cont_torque[idx_aluminium],
        y=estimated_weight,
        name="Estimated weight",
        mode="markers",
    )
    fig_weight.add_trace(scatter_estimated)
    fig_weight.show()

    print(np.mean(weight_per_blade_aluminium) / np.mean(weight_per_blade[idx_composite]))
